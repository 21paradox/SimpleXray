name: "Build"

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Explicit Submodule Update
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
          
      - name: Read Xray-core Version
        id: xray_version
        run: echo "XRAY_VERSION=$(cat XRAY_CORE_VERSION.txt)" >> $GITHUB_ENV

      - name: Setup Keystore and Properties
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE }}" | base64 -d > ./store.jks
          echo "storeFile=store.jks" > ./store.properties
          echo "storePassword=${{ secrets.SIGNING_STORE_PASSWORD }}" >> ./store.properties
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> ./store.properties
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> ./store.properties

      - name: Download Rules Files
        run: |
          wget https://github.com/lhear/v2ray-rules-dat/releases/latest/download/geoip.dat -O ./app/src/main/assets/geoip.dat
          wget https://github.com/lhear/v2ray-rules-dat/releases/latest/download/geosite.dat -O ./app/src/main/assets/geosite.dat

      - name: Download Xray-core
        run: |
          XRAY_VERSION="${{ env.XRAY_VERSION }}"
          echo "Attempting to download Xray-core version: $XRAY_VERSION"
          wget "https://github.com/XTLS/Xray-core/releases/download/$XRAY_VERSION/Xray-android-arm64-v8a.zip"
          mkdir -p ./app/src/main/jniLibs/arm64-v8a
          unzip Xray-android-arm64-v8a.zip xray -d ./app/src/main/jniLibs/arm64-v8a
          mv ./app/src/main/jniLibs/arm64-v8a/xray ./app/src/main/jniLibs/arm64-v8a/libxray.so

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Find and Copy APK
        run: |
          APK_FILE=$(find app/build/outputs/apk/release -name "*.apk" -print -quit)
          if [ -f "$APK_FILE" ]; then
            echo "Found APK: $APK_FILE"
            cp "$APK_FILE" ./simplexray-arm64-v8a.apk
          else
            echo "Error: No APK file found in app/build/outputs/apk/release/"
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: simplexray-arm64-v8a.apk
          path: simplexray-arm64-v8a.apk
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: "simplexray-*"
          merge-multiple: true

      - name: Upload artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for i in release/simplexray-*; do
            gh release upload ${{ github.event.release.tag_name }} $i
          done